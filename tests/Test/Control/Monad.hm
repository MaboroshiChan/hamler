module Test.Control.Monad where

import Test.QuickCheck (TestGroup(..), TestResult, quickCheck, quickCheck1)
import Prelude (Bool, IO, Int, bind, guardF, head, pure, range, return, seqio, unsafePerformIO, ($), (&&), (+), (==), (>>=))
import Control.Monad

baseList :: [Int]
baseList = [1..5]

ioInt :: IO Int
ioInt = return 0

pureProp :: Integer->Boolean
pureProp x = (head $ pure x) == x

returnProp :: Integer->Boolean
returnProp x = (head $ return x) == x

ioProp :: Integer->IO Bool
ioProp x = do
    y <- return x
    return (y == x)

bindTest :: Boolean
bindTest = ([1..5] >>= (\x->[x, x])) == [1,1,2,2,3,3,4,4,5,5]

liftM1Test :: Boolean
liftM1Test = (liftM1 (\x->x + 1) baseList) == [2..6]

liftM2Test :: Boolean
liftM2Test = (liftM2 (\x y->x + y) baseList baseList) == [2,3,4,5,6,3,4,5,6,7,4,5,6,7,8,5,6,7,8,9,6,7,8,9,10]

liftM3Test :: Boolean
liftM3Test = (liftM3 (\x y z-> x + y + z) [1] [1] []) == []

liftM4Test :: Boolean
liftM4Test = (liftM4 (\x y z t->x+y+z+t) [1] [1] [1] [1]) == [4]

guardFTest :: Boolean
guardFTest = ((guardF true) == [true]) && ((guardF false) == [])

unsafePerformIOTest :: Boolean
unsafePerformIOTest = (unsafePerformIO ioInt) == 0

seqioTest :: IO Bool
seqioTest = do
    xs <- seqio (liftM1 return baseList)
    return (xs == baseList) 

test :: TestGroup (Integer -> IO TestResult)
test = Exe [
    quickCheck "pureProp" pureProp
   ,quickCheck "returnProp" returnProp
   ,quickCheck1 "ioProp" ioProp
   ,quickCheck "bindTest" bindTest
   ,quickCheck "liftM1" liftM1Test
   ,quickCheck "liftM2Test" liftM2Test
   ,quickCheck "liftM3Test" liftM3Test
   ,quickCheck "liftM4Test" liftM4Test
   ,quickCheck "guardFTest" guardFTest
   ,quickCheck "unsafePerformIOTest" unsafePerformIOTest
   ,quickCheck1 "seqioTest" seqioTest
]